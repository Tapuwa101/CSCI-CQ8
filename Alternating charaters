import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'alternatingCharacters' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING s as parameter.
     */

    public static int alternatingCharacters(String s) {
     return minDeletions(s, 0);
    }

    // Recursive function to calculate minimum deletions
    private static int minDeletions(String s, int index) {
        // Base case: If the index reaches the end of the string, return 0
        if (index == s.length() - 1) {
            return 0;
        }

        // Check if the current character matches the next one
        if (s.charAt(index) == s.charAt(index + 1)) {
            // If yes, choose to delete either the current or the next character
            // and recursively calculate minimum deletions for the updated string
            return 1 + minDeletions(s.substring(0, index) + s.substring(index + 1), index);
        } else {
            // If characters are already different, move on to the next character
            // and recursively calculate minimum deletions for the rest of the string
            return minDeletions(s, index + 1);
        }
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s = bufferedReader.readLine();

                int result = Result.alternatingCharacters(s);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
